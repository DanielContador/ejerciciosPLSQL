VAR B_VALOR_HORA NUMBER;
VAR B_COL NUMBER;
VAR B_MOV NUMBER;
EXEC :B_VALOR_HORA :=3000;
EXEC :B_COL:=60000;
EXEC :B_MOV:=40000;

DECLARE
CURSOR C_EJECUTIVO IS
SELECT
COD_EJECUTIVO, SUELDO_BASE_PACTADO, NOTA_EVALUACION
FROM EJECUTIVO;

R_EJE C_EJECUTIVO%ROWTYPE;
/*Para obtener el dia de la semana como numero
se hizo to_char 'FMD'*/
CURSOR C_HORA_EXTRA(PEJE VARCHAR2) IS 
SELECT TO_CHAR(FECHA,'FMD') DIA_SEM, CANT_HORA
FROM HORA_EXTRA WHERE COD_EJECUTIVO=PEJE;
/*SE DECLARA VARRAY*/
TYPE TIPO_VARRAY_DESC IS VARRAY(2) OF NUMBER(2);
VARRAY_DESCUENTO TIPO_VARRAY_DESC:=TIPO_VARRAY_DESC(7,12);

RT_LI LIQUIDACION%ROWTYPE;
V_BONO_HRX NUMBER(6);
V_COD NUMBER(10);
V_MEN VARCHAR2(200);
V_BONO_NOTA NUMBER(6);
BEGIN

EXECUTE IMMEDIATE 'TRUNCATE TABLE REGISTRO_ERROR';
EXECUTE IMMEDIATE 'TRUNCATE TABLE LIQUIDACION';
/*EXECUTE IMMEDIATE 'DROP SEQUENCE SQ_ERROR_GASMAX';*/
--EXECUTE IMMEDIATE 'CREATE SEQUENCE SQ_ERROR_GASMAX';
RT_LI.FECHA_PAGO:=EXTRACT(MONTH FROM SYSDATE)||EXTRACT(YEAR FROM SYSDATE);
RT_LI.COLACION:=:B_COL;
RT_LI.MOVILIZACION:=:B_MOV;
    OPEN C_EJECUTIVO;
        LOOP
        FETCH C_EJECUTIVO INTO R_EJE;
        EXIT WHEN C_EJECUTIVO%NOTFOUND;
        RT_LI.COD_EJECUTIVO:=R_EJE.COD_EJECUTIVO;
        RT_LI.SUELDO_PACTADO:=R_EJE.SUELDO_BASE_PACTADO;
        RT_LI.CANT_HORA_EXTRA:=0;
        RT_LI.VALOR_TOTAL_HORA:=0;
        FOR R_HR_EXTRA IN C_HORA_EXTRA(R_EJE.COD_EJECUTIVO) LOOP
            IF R_HR_EXTRA.DIA_SEM BETWEEN 1 AND 5 THEN
            /*ACUMULADOR*/
                RT_LI.CANT_HORA_EXTRA:=RT_LI.CANT_HORA_EXTRA+R_HR_EXTRA.CANT_HORA;
            ELSE 
                RT_LI.CANT_HORA_EXTRA:=RT_LI.CANT_HORA_EXTRA+R_HR_EXTRA.CANT_HORA*2;
            
            END IF;
        END LOOP;
        RT_LI.VALOR_TOTAL_HORA:=RT_LI.CANT_HORA_EXTRA*:B_VALOR_HORA;
        BEGIN
            SELECT BONO INTO V_BONO_HRX FROM 
            BONO_HORA_EXTRA WHERE 
            RT_LI.CANT_HORA_EXTRA BETWEEN 
            CANT_MIN AND CANT_MAX;
            
            EXCEPTION
           
                WHEN NO_DATA_FOUND THEN
                 V_BONO_HRX:=0;
                 V_COD:=SQLCODE;
                 V_MEN:=SQLERRM;
                INSERT INTO REGISTRO_ERROR(ID_ERROR, COD_ERROR, BLOQUE, MENSAJE_ERROR)
                VALUES(SQ_ERROR_GASMAX.NEXTVAL, V_COD, 'SELECT INTO BONO HORA EXTRA EJECUTIVO: '|| R_EJE.COD_EJECUTIVO, V_MEN);
                    
        END;
        RT_LI.VALOR_TOTAL_HORA:=RT_LI.VALOR_TOTAL_HORA+V_BONO_HRX;
        BEGIN
        SELECT BONO INTO V_BONO_NOTA FROM BONO_EVALUACION
        WHERE R_EJE.NOTA_EVALUACION BETWEEN NOTA_MIN AND NOTA_MAX;
        EXCEPTION WHEN TOO_MANY_ROWS THEN
            V_BONO_NOTA:=0;
            V_COD:=SQLCODE;
            V_MEN:=SQLERRM;
            INSERT INTO REGISTRO_ERROR(ID_ERROR, COD_ERROR, BLOQUE, MENSAJE_ERROR)
            VALUES(SQ_ERROR_GASMAX.NEXTVAL, V_COD, 'SELECT INTO BONO HORA EXTRA EJECUTIVO: '|| R_EJE.COD_EJECUTIVO, V_MEN);
            END;
            RT_LI.TOTAL_IMPONIBLE:=R_EJE.SUELDO_BASE_PACTADO+RT_LI.VALOR_TOTAL_HORA+V_BONO_NOTA;
            RT_LI.AFP:=10;
            RT_LI.SALUD:=10;
            RT_LI.DESCUENTO:=RT_LI.AFP+RT_LI.SALUD;
            RT_LI.LIQUIDO:=(RT_LI.TOTAL_IMPONIBLE-RT_LI.DESCUENTO)+RT_LI.COLACION+RT_LI.MOVILIZACION;
            dbms_output.put_line(RT_LI.TOTAL_IMPONIBLE);
            
            INSERT INTO LIQUIDACION VALUES RT_LI;
        END LOOP;
    
    CLOSE C_EJECUTIVO;

END;
/*CREATE SEQUENCE SQ_ERROR_GASMAX;*/

/*SELECT FECHA, CANT_HORA
FROM HORA_EXTRA WHERE COD_EJECUTIVO=1;*/






--EJERCICIO 1 GUIA P8 (ESQUEMA DIFERENTE: COOPERA)


DECLARE

--CURSOR DE SOCIO
CURSOR C_SOCIO IS
SELECT SO.NRO_SOCIO, SO.NUMRUN, SO.DVRUN, SO.PNOMBRE, SO.SNOMBRE, SO.APPATERNO, 
SO.APMATERNO, PRO.NOMBRE_PROVINCIA, RE.NOMBRE_REGION, TRUNC(MONTHS_BETWEEN(SYSDATE, SO.FECHA_NACIMIENTO)/12) AS EDAD,
SO.FECHA_NACIMIENTO
FROM SOCIO SO NATURAL JOIN PROVINCIA PRO NATURAL JOIN REGION RE;
--REGISTRO DEL CURSOR SOCIO
R_SOCIO C_SOCIO%ROWTYPE;
/*Registro de tabla es lo que se utiliza para obtener todas las variables de la tabla
donde se van a insertar los datos obtenidos a traves del cursor,
esto se utiliza para no tener que crear muchas variables... y como este registro obtiene la 
estructura de la tabla, viene con todo lo necesario*/
RT_UC USUARIO_CLAVE%ROWTYPE;

V_PROV VARCHAR2(10);
V_DIGITO NUMBER(10);
V_MES_PROCESO NUMBER(3):=TO_CHAR(SYSDATE,'MM');
V_FACTOR NUMBER(10);
V_COD NUMBER(10);
V_MEN VARCHAR2(100);
V_ANNO_NAC NUMBER(10);
V_TOTAL_CUOTAS NUMBER(10);
BEGIN
EXECUTE IMMEDIATE 'TRUNCATE TABLE ERROR_PROCESO';
EXECUTE IMMEDIATE 'TRUNCATE TABLE USUARIO_CLAVE';
EXECUTE IMMEDIATE 'DROP SEQUENCE SQ_ERROR_COOPERA';
EXECUTE IMMEDIATE 'CREATE SEQUENCE SQ_ERROR_COOPERA';
-- Se abre el cursor y se le asigna al registro de tabla las variables rescatadas desde el cursor con un loop
OPEN C_SOCIO;
    LOOP
    FETCH C_SOCIO INTO R_SOCIO;
    EXIT WHEN C_SOCIO%NOTFOUND;
    RT_UC.NRO_SOCIO:=R_SOCIO.NRO_SOCIO;
    RT_UC.NUMRUN_SOCIO:=R_SOCIO.NUMRUN||'-'||R_SOCIO.DVRUN;
    RT_UC.NOMBRE_SOCIO:=R_SOCIO.PNOMBRE||' '||R_SOCIO.SNOMBRE||' '||R_SOCIO.APPATERNO||' '||R_SOCIO.APMATERNO;
    

    /*CONDICION PARA LAS LETRAS DE LA PROVINCIA*/
    IF R_SOCIO.NOMBRE_REGION IN ('Tarapacá', 'Antofagasta', 'Atacama', 'Coquimbo') THEN
        V_PROV:=SUBSTR(R_SOCIO.NOMBRE_PROVINCIA,2,2);
    ELSIF R_SOCIO.NOMBRE_REGION IN ('Valparaíso', 'Del Libertador Gral. Bernardo O’Higgins',
    'Del Maule', 'Del Biobío','De la Araucanía') THEN
        V_PROV:=SUBSTR(R_SOCIO.NOMBRE_PROVINCIA,LENGTH(R_SOCIO.NOMBRE_PROVINCIA)-2,2);
    ELSIF R_SOCIO.NOMBRE_REGION IN ('De Los Lagos', 'Aysén del Gral.Carlos Ibáñez del Campo',
    'De Magallanes y de la Antártica Chilena', 'Metropolitana de Santiago') THEN
        V_PROV:=SUBSTR(R_SOCIO.NOMBRE_PROVINCIA,1,1)||
        SUBSTR(R_SOCIO.NOMBRE_PROVINCIA,LENGTH(R_SOCIO.NOMBRE_PROVINCIA),1);
    ELSIF R_SOCIO.NOMBRE_REGION IN ('De Los Ríos', 'Arica y Parinacota',
    'De Ñuble') THEN
        V_PROV:=SUBSTR(R_SOCIO.NOMBRE_PROVINCIA,1,2);
    END IF;
    
    --CONDICION PARA EL DIGITO A MULTIPLICAR (TRAMO DE EDAD) MAYOR DE 60

    IF R_SOCIO.EDAD>=60 THEN
            BEGIN
            SELECT FACTOR
            INTO V_FACTOR
            FROM TRAMO_3RA_EDAD WHERE R_SOCIO.EDAD BETWEEN RANGO_EDAD_MIN AND RANGO_EDAD_MAX;
            --EXCEPCION
            EXCEPTION WHEN TOO_MANY_ROWS OR NO_DATA_FOUND THEN
                V_FACTOR:=0;
                 V_COD:=SQLCODE;
                 V_MEN:=SQLERRM;
                INSERT INTO ERROR_PROCESO(CORREL_ERROR, SENTENCIA_ERROR, DESCRIP_ERROR)
                VALUES(SQ_ERROR_COOPERA.NEXTVAL,'SELECT INTO V_FACTOR TRAMO 3A EDAD SOCIO: '|| R_SOCIO.NRO_SOCIO, V_MEN);
            END;
            
            V_DIGITO:=V_FACTOR*V_MES_PROCESO;
            
            
    END IF;
    --SI ES QUE EL SOCIO ES MENOR QUE 60
    IF R_SOCIO.EDAD<60 THEN
        V_DIGITO:=SUBSTR(R_SOCIO.EDAD,1,1)*V_MES_PROCESO;
    END IF;
    
    --V_DIGITO
   --30:64 37:64 49:64, (USUARIOS CON ERROR)
    /*ASIGNACION DEL NOMBRE DE USUARIO A LA VARIABLE DENTRO DEL REGISTRO DE TABLA*/
    RT_UC.NOMBRE_USUARIO:=UPPER(SUBSTR(R_SOCIO.PNOMBRE,1,1))||LOWER(SUBSTR(R_SOCIO.PNOMBRE,2,2))||
    LENGTH(R_SOCIO.APPATERNO)||'*'||SUBSTR(R_SOCIO.NUMRUN,LENGTH(R_SOCIO.NUMRUN)-2,2)||V_PROV||V_DIGITO;
    
    --ANNO NACIMIENTO +2
    V_ANNO_NAC:=EXTRACT(YEAR FROM R_SOCIO.FECHA_NACIMIENTO)+2;
    
    --SELECT PARA OBTENER NUMERO TOTAL DE CUOTAS DEL ULTIMO CREDITO
    BEGIN
    SELECT TOTAL_CUOTAS_CREDITO INTO
    V_TOTAL_CUOTAS
    FROM CREDITO_SOCIO WHERE NRO_SOCIO=R_SOCIO.NRO_SOCIO;
    V_TOTAL_CUOTAS:=V_TOTAL_CUOTAS/2;
    EXCEPTION WHEN NO_DATA_FOUND THEN
    V_TOTAL_CUOTAS:=0;
                 V_COD:=SQLCODE;
                 V_MEN:=SQLERRM;
                INSERT INTO ERROR_PROCESO(CORREL_ERROR, SENTENCIA_ERROR, DESCRIP_ERROR)
                VALUES(SQ_ERROR_COOPERA.NEXTVAL,'SELECT INTO V_TOTAL_CUOTAS TOTAL_CUOTAS_CREDITO: '|| R_SOCIO.NRO_SOCIO, V_MEN);
    
    END;
    
        --Clave de usuario
    RT_UC.CLAVE_USUARIO:=UPPER(SUBSTR(R_SOCIO.APPATERNO,LENGTH(R_SOCIO.APPATERNO)-3,3))||V_ANNO_NAC
    ||R_SOCIO.NRO_SOCIO*3||EXTRACT(MONTH FROM SYSDATE)||EXTRACT(YEAR FROM SYSDATE)||'*'||V_TOTAL_CUOTAS;
    DBMS_OUTPUT.PUT_LINE(RT_UC.CLAVE_USUARIO);
    
    INSERT INTO USUARIO_CLAVE VALUES RT_UC;
    
    
    END LOOP;
    
    

CLOSE C_SOCIO;


END;



--EJERCICIO 2 GUIA P8


VAR B_IPC NUMBER;
VAR CINCO_UF NUMBER;
EXEC :CINCO_UF:=101299; 
EXEC :B_IPC:=2.73;

DECLARE
--CURSOR PRINCIPAL
CURSOR C_PIS IS
SELECT NRO_SOCIO, FECHA_SOLIC_PROD, NRO_SOLIC_PROD,
AHORRO_MINIMO_MENSUAL, DIA_PAGO_MENSUAL, MONTO_TOTAL_AHORRADO, COD_PROD_INV
FROM PRODUCTO_INVERSION_SOCIO;
--CURSOR CON PARAMETRO PARA LA CANTIDAD DE PRODUCTOS POR SOCIO
CURSOR C_CANTIDAD_PIS(PNRO NUMBER) IS 
SELECT COUNT(NRO_SOCIO) AS CANTIDAD FROM PRODUCTO_INVERSION_SOCIO WHERE NRO_SOCIO=PNRO;
--CURSOR CON PARAMETRO PARA OBTENER EL TOTAL ABONADO EN EL AÑO
CURSOR C_ABONADO(PNRO NUMBER) IS
SELECT SUM(MONTO_MOVIMIENTO) AS TOTAL FROM MOVIMIENTO WHERE NRO_SOCIO=PNRO AND 
EXTRACT(YEAR FROM FECHA_MOVIMIENTO)=EXTRACT(YEAR FROM SYSDATE);

R_PIS C_PIS%ROWTYPE;
RT_PIS PRODUCTO_INVERSION_SOCIO%ROWTYPE;
V_TOTAL_REAJUSTE NUMBER(10);

--DECLARAR EXCEPCION
ERR_MASDE_UF EXCEPTION;
V_MEN VARCHAR2(100);
BEGIN

EXECUTE IMMEDIATE 'TRUNCATE TABLE ERROR_PROCESO';
EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_EXCEP_UF';
EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_EXCEP_UF';

--SE ABRE EL CURSOR PRINCIPAL PIS
OPEN C_PIS;
--SE HACE UN LOOP SIMPLE
    LOOP 
    --El total del reajuste se inicializa en 0
    V_TOTAL_REAJUSTE:=0;
    --SE GUARDAN LOS DATOS DEL CURSOR EN UN REGISTRO
    FETCH C_PIS INTO R_PIS;
    --SALE DEL LOOP CUANDO NO ENCUENTRA MAS FILAS EN EL CURSOR
    EXIT WHEN C_PIS%NOTFOUND;
    
    --SE GUARDAN EN EL REGISTRO DE TABLA LOS VALORES QUE NO NECESITAN SER CALCULADOS
    RT_PIS.NRO_SOLIC_PROD:=R_PIS.NRO_SOLIC_PROD;
    RT_PIS.NRO_SOCIO:=R_PIS.NRO_SOCIO;
    RT_PIS.FECHA_SOLIC_PROD:=R_PIS.FECHA_SOLIC_PROD;
    RT_PIS.AHORRO_MINIMO_MENSUAL:=R_PIS.AHORRO_MINIMO_MENSUAL;
    RT_PIS.DIA_PAGO_MENSUAL:=R_PIS.DIA_PAGO_MENSUAL;
    RT_PIS.COD_PROD_INV:=R_PIS.COD_PROD_INV;
    --SE HACE UN CICLO FOR PARA EL CURSOR CON PARAMETRO, DONDE SE OBTIENE LOS SOCIOS CON MAS DE UN PIS
    FOR R_CANT IN C_CANTIDAD_PIS(R_PIS.NRO_SOCIO) LOOP
    --SI SE OBTIENE MAS DE UN PIS ENTONCES HACE UN REAJUSTE EN EL MONTO TOTAL AHORRADO SEGUN LA CANTIDAD
    IF R_CANT.CANTIDAD>1 THEN 
        R_PIS.MONTO_TOTAL_AHORRADO:=R_PIS.MONTO_TOTAL_AHORRADO*(100+R_CANT.CANTIDAD)/100;
        V_TOTAL_REAJUSTE:=V_TOTAL_REAJUSTE+R_PIS.MONTO_TOTAL_AHORRADO*(R_CANT.CANTIDAD/100);
    END IF;
    
    --CONDICION PARA LOS QUE SOLO TIENEN 1
    
    IF R_CANT.CANTIDAD=1 THEN
    --SE HACE UN CICLO FOR PARA IR OBTENIENDO EL TOTAL ABONADO POR CADA SOCIO
    --EL PARAMETRO DE ESTE ES EL NUMERO DEL SOCIO Y LA CONDICION DEL AÑO, QUE ESTA DEFINIDA EN EL MISMO CURSOR
        FOR R_ABONADO IN C_ABONADO(R_PIS.NRO_SOCIO) LOOP
            IF R_ABONADO.TOTAL>1000000 THEN
                --SE LE AJUSTA EN 1 POR CIENTO SI HA ABONADO MAS DE 1 MILLON EN EL AÑO
                R_PIS.MONTO_TOTAL_AHORRADO:=R_PIS.MONTO_TOTAL_AHORRADO*(101/100);
                V_TOTAL_REAJUSTE:=V_TOTAL_REAJUSTE+R_PIS.MONTO_TOTAL_AHORRADO*(1/100);
            END IF;
        END LOOP;
    END IF;
    

    
    
    END LOOP;
    
    --REAJUSTE PARA TODOS
    
    --IPC
    V_TOTAL_REAJUSTE:=V_TOTAL_REAJUSTE+R_PIS.MONTO_TOTAL_AHORRADO*(:B_IPC/100);
    R_PIS.MONTO_TOTAL_AHORRADO:=R_PIS.MONTO_TOTAL_AHORRADO*(100+:B_IPC)/100;
    
        --EXCEPCION SI SOBREPASA LAS 5UF
   
    BEGIN
        IF V_TOTAL_REAJUSTE>(:CINCO_UF*4) THEN
        
            RAISE ERR_MASDE_UF;
        
        END IF;
        
        EXCEPTION WHEN ERR_MASDE_UF THEN
        V_MEN:=SQLERRM;
        V_TOTAL_REAJUSTE:=:CINCO_UF;
        INSERT INTO ERROR_PROCESO(CORREL_ERROR, SENTENCIA_ERROR, DESCRIP_ERROR)
        VALUES(SEQ_EXCEP_UF.NEXTVAL, 'SOBREPASA EL LIMITE DE LAS 20UF: '||R_PIS.NRO_SOCIO,V_MEN );
        
    END;
    
  RT_PIS.MONTO_TOTAL_AHORRADO:=R_PIS.MONTO_TOTAL_AHORRADO;
    
    --DBMS_OUTPUT.PUT_LINE(RT_PIS.MONTO_TOTAL_AHORRADO);
    --UPDATE DE LA TABLA
    UPDATE PRODUCTO_INVERSION_SOCIO 
    SET 
        MONTO_TOTAL_AHORRADO = RT_PIS.MONTO_TOTAL_AHORRADO
        WHERE NRO_SOLIC_PROD=RT_PIS.NRO_SOLIC_PROD AND NRO_SOCIO=RT_PIS.NRO_SOCIO;
    END LOOP;

CLOSE C_PIS;

/*SELECT * FROM PRODUCTO_INVERSION_SOCIO
ROLLBACK*/


END;



--EJERCICIO 3 GUIA P8




DECLARE

--Cursor principal
CURSOR C_CSOCIO IS
SELECT SO.NRO_SOCIO, SO.NUMRUN||'-'||SO.DVRUN AS RUN_SOCIO, CS.NRO_SOLIC_CREDITO, CC.NOMBRE_CREDITO AS TIPO_CREDITO,
CS.MONTO_TOTAL_CREDITO, COUNT(CCS.NRO_CUOTA) AS NRO_TOTAL_CUOTAS, SO.FECHA_NACIMIENTO
FROM SOCIO SO
JOIN CREDITO_SOCIO CS ON SO.NRO_SOCIO=CS.NRO_SOCIO
LEFT JOIN CREDITO CC ON CS.COD_CREDITO=CC.COD_CREDITO
LEFT JOIN CUOTA_CREDITO_SOCIO CCS ON CCS.NRO_SOLIC_CREDITO=CS.NRO_SOLIC_CREDITO
GROUP BY SO.NRO_SOCIO,SO.NUMRUN,SO.DVRUN ,CS.NRO_SOLIC_CREDITO,CC.NOMBRE_CREDITO,
CS.MONTO_TOTAL_CREDITO, SO.FECHA_NACIMIENTO
ORDER BY SO.NRO_SOCIO;

R_CSOCIO C_CSOCIO%ROWTYPE;
--Cursor para obtener el numero de cuota del mes y la fecha de vencimiento 
CURSOR C_CUOTAMES(PNROSOLCRE NUMBER) IS
SELECT NRO_CUOTA AS NRO_CUOTA_MES, FECHA_VENC_CUOTA AS FECHA_VENC_CUOTA_MES, VALOR_CUOTA AS VALOR_CUOTA_MES
FROM CUOTA_CREDITO_SOCIO
WHERE EXTRACT(MONTH FROM FECHA_VENC_CUOTA)=EXTRACT(MONTH FROM SYSDATE) AND NRO_SOLIC_CREDITO=PNROSOLCRE;

--Cursor para obtener saldo de pago del mes anterior, dias de atraso del pago del mes anterior
CURSOR C_SALDOMESANT(PNROSC NUMBER) IS
            SELECT SALDO_POR_PAGAR AS SALDO_PAGO_MES_ANT,
            FECHA_VENC_CUOTA-FECHA_PAGO_CUOTA AS DIAS_ATRASO_PAGO_MES_ANT
            FROM CUOTA_CREDITO_SOCIO
            WHERE EXTRACT(MONTH FROM FECHA_PAGO_CUOTA)=EXTRACT(MONTH FROM SYSDATE)-1
            AND NRO_SOLIC_CREDITO=PNROSC;
            
            

--Crear registro de tabla

RT_PMC PAGO_MENSUAL_CREDITO%ROWTYPE;

--Variables
V_FECHA_PROCESO VARCHAR2(7):=EXTRACT(YEAR FROM SYSDATE)||'/'||EXTRACT(MONTH FROM SYSDATE);
V_SALDO_PAGO_MES_ANT NUMBER(10);
V_PORC_MULTA NUMBER(10);
V_COD NUMBER(10);
V_MEN VARCHAR2(100);
BEGIN

EXECUTE IMMEDIATE 'TRUNCATE TABLE ERROR_PROCESO';
EXECUTE IMMEDIATE 'TRUNCATE TABLE PAGO_MENSUAL_CREDITO';
EXECUTE IMMEDIATE 'DROP SEQUENCE SQ_ERROR_PORC';
EXECUTE IMMEDIATE 'CREATE SEQUENCE SQ_ERROR_PORC';
--CURSOR PRINCIPAL
    OPEN C_CSOCIO;
        LOOP
            FETCH C_CSOCIO INTO R_CSOCIO;
            EXIT WHEN C_CSOCIO%NOTFOUND;
            RT_PMC.FECHA_PROCESO:=V_FECHA_PROCESO;
            RT_PMC.NRO_SOCIO:=R_CSOCIO.NRO_SOCIO;
            RT_PMC.RUN_SOCIO:=R_CSOCIO.RUN_SOCIO;
            RT_PMC.NRO_SOLIC_CREDITO:=R_CSOCIO.NRO_SOLIC_CREDITO;
            RT_PMC.TIPO_CREDITO:=R_CSOCIO.TIPO_CREDITO;
            RT_PMC.MONTO_TOTAL_CREDITO:=R_CSOCIO.MONTO_TOTAL_CREDITO;
            RT_PMC.NRO_TOTAL_CUOTAS:=R_CSOCIO.NRO_TOTAL_CUOTAS;
--FOR PARA DATOS DE LA CUOTA DEL MES
            FOR R_CUOTAMES IN C_CUOTAMES(R_CSOCIO.NRO_SOLIC_CREDITO) LOOP
                RT_PMC.NRO_CUOTA_MES:=R_CUOTAMES.NRO_CUOTA_MES;
                RT_PMC.VALOR_CUOTA_MES:=R_CUOTAMES.VALOR_CUOTA_MES;
                RT_PMC.VALOR_TOTAL_CUOTA_MES:=RT_PMC.VALOR_CUOTA_MES;
                RT_PMC.FECHA_VENC_CUOTA_MES:=R_CUOTAMES.FECHA_VENC_CUOTA_MES;
            END LOOP;
            
            
            
--For para saldo del mes anterior
            FOR R_SALDOMESANT IN C_SALDOMESANT(R_CSOCIO.NRO_SOLIC_CREDITO) LOOP
                RT_PMC.SALDO_PAGO_MES_ANT:=R_SALDOMESANT.SALDO_PAGO_MES_ANT;
                --if para que solo cuando sea mayor que 0 los días se considere un atraso y se cobre una multa
                IF R_SALDOMESANT.DIAS_ATRASO_PAGO_MES_ANT>0 THEN
                    RT_PMC.DIAS_ATRASO_PAGO_MES_ANT:=R_SALDOMESANT.DIAS_ATRASO_PAGO_MES_ANT;
                    
                    --se obtiene el porcentaje
                    BEGIN
                        SELECT PORC_MULTA INTO V_PORC_MULTA
                        FROM MULTA_MORA WHERE RT_PMC.DIAS_ATRASO_PAGO_MES_ANT 
                        BETWEEN TRAMO_DIA_MIN_ATRASO AND TRAMO_DIA_MAX_ATRASO;
                        
                        EXCEPTION WHEN NO_DATA_FOUND THEN
                            V_PORC_MULTA:=0;
                            V_COD:=SQLCODE;
                            V_MEN:=SQLERRM;
                            INSERT INTO ERROR_PROCESO(CORREL_ERROR, SENTENCIA_ERROR,DESCRIP_ERROR)
                            VALUES(SQ_ERROR_PORC.NEXTVAL,'SELECT INTO V_PORC_MULTA: '|| 
                            R_CSOCIO.NRO_SOCIO, V_MEN);
                    
                    END;
                    
                    --se calcula segun porcentaje
                    RT_PMC.VALOR_TOTAL_CUOTA_MES:=RT_PMC.VALOR_CUOTA_MES+RT_PMC.MONTO_TOTAL_CREDITO*(V_PORC_MULTA/100);
                    RT_PMC.MULTA_ATRASO_PAGO_MES_ANT:=RT_PMC.MONTO_TOTAL_CREDITO*(V_PORC_MULTA/100);
                ELSE 
                    RT_PMC.DIAS_ATRASO_PAGO_MES_ANT:=0;
                    RT_PMC.MULTA_ATRASO_PAGO_MES_ANT:=0;
                END IF;
                --If para que el saldo por pagar del mes anterior se sume al ACTUAL
                
                IF R_SALDOMESANT.SALDO_PAGO_MES_ANT>0 THEN
                    RT_PMC.VALOR_TOTAL_CUOTA_MES:=RT_PMC.VALOR_CUOTA_MES+R_SALDOMESANT.SALDO_PAGO_MES_ANT;
                END IF;
                DBMS_OUTPUT.PUT_LINE(RT_PMC.NRO_SOCIO||' '||RT_PMC.VALOR_CUOTA_MES);
            END LOOP;
            --Beneficio para adulto mayor 65 años
            IF TRUNC(MONTHS_BETWEEN(R_CSOCIO.FECHA_NACIMIENTO, SYSDATE)/12)>=65 
            AND RT_PMC.SALDO_PAGO_MES_ANT>0
            AND RT_PMC.DIAS_ATRASO_PAGO_MES_ANT=0
            THEN 
                RT_PMC.VALOR_TOTAL_CUOTA_MES:=RT_PMC.VALOR_TOTAL_CUOTA_MES*(95/100);
                RT_PMC.VALOR_REBAJAR_65_ANNOS:=RT_PMC.VALOR_TOTAL_CUOTA_MES*(5/100);
            ELSE 
                RT_PMC.VALOR_REBAJAR_65_ANNOS:=0;
                
            END IF;
            
            
            INSERT INTO PAGO_MENSUAL_CREDITO VALUES RT_PMC;
        END LOOP;
    CLOSE C_CSOCIO;

/*SELECT * FROM PAGO_MENSUAL_CREDITO*/
END;




--AVANCE PRUEBA_2




--Recordar la instruccion exit when despues del fetch...
DECLARE
--Cursor principal
CURSOR C_PED IS
SELECT PED.FEC_PEDIDO AS FECHA, CEP.NOM_CEPA AS CEPA, COUNT(MEZ.ID_CEPA) AS NUM_PEDIDOS,
SUM(PED.TOTAL) AS MONTO_PEDIDOS
FROM PEDIDO PED
JOIN DETALLE_PEDIDO DPED ON PED.ID_PEDIDO=DPED.ID_PEDIDO
JOIN MEZCLA MEZ ON MEZ.ID_PRODUCTO=DPED.ID_PRODUCTO
JOIN CEPA CEP ON MEZ.ID_CEPA=CEP.ID_CEPA
WHERE EXTRACT(YEAR FROM PED.FEC_PEDIDO)=EXTRACT(YEAR FROM SYSDATE)-1--para calcular las ventas del año pasado
GROUP BY PED.FEC_PEDIDO, MEZ.ID_CEPA, CEP.NOM_CEPA;
--registro del cursor principal
R_PED C_PED%ROWTYPE;

--Cursor Resumen
CURSOR C_RES(PCEP VARCHAR2) IS
SELECT
CEP.NOM_CEPA AS CEPA, COUNT(MEZ.ID_CEPA) AS NUM_PEDIDOS,
SUM(PED.TOTAL) AS MONTO_PEDIDOS
FROM PEDIDO PED
JOIN DETALLE_PEDIDO DPED ON PED.ID_PEDIDO=DPED.ID_PEDIDO
JOIN MEZCLA MEZ ON MEZ.ID_PRODUCTO=DPED.ID_PRODUCTO
JOIN CEPA CEP ON MEZ.ID_CEPA=CEP.ID_CEPA
WHERE EXTRACT(YEAR FROM PED.FEC_PEDIDO)=EXTRACT(YEAR FROM SYSDATE)-1--para calcular las ventas del año pasado
AND CEP.NOM_CEPA=PCEP
GROUP BY MEZ.ID_CEPA, CEP.NOM_CEPA;

--registro de la tabla detalle
RT_DVD DETALLE_VENTAS_DIARIAS%ROWTYPE;

--registro de la tabla resumen
RT_RS RESUMEN_VENTAS_CEPA%ROWTYPE;

--variables

V_PCTGRAVAMEN NUMBER(10);
V_MEN VARCHAR2(100);
V_PCTCOMIS NUMBER(10);
BEGIN
    OPEN C_PED;
    LOOP
    FETCH C_PED INTO R_PED;
    EXIT WHEN C_PED%NOTFOUND;
    RT_DVD.FECHA:=R_PED.FECHA;
    RT_DVD.CEPA:=R_PED.CEPA;
    RT_DVD.NUM_PEDIDOS:=R_PED.NUM_PEDIDOS;
    RT_DVD.MONTO_PEDIDOS:=R_PED.MONTO_PEDIDOS;
    
    
    
    BEGIN
    --Select para obtener el porcentaje de gravamen
    SELECT PCTGRAVAMEN
    INTO V_PCTGRAVAMEN
    FROM GRAVAMEN WHERE RT_DVD.MONTO_PEDIDOS BETWEEN MTO_VENTA_INF AND MTO_VENTA_SUP;
    --Excepcion para los montos que no entran en el rango
    EXCEPTION WHEN NO_DATA_FOUND THEN
    V_PCTGRAVAMEN:=0;
    V_MEN:=SQLERRM;
    --Inserción del error en la tabla...
    INSERT INTO ERRORES_PROCESO_RECAUDACION(ERROR_ID, ORA_MSG, USR_MSG)
    VALUES (ERROR_PROCESO.NEXTVAL,V_MEN,'NO HAY DATOS GRAVAMENES' );
    END;
    
    --Calculo gravamenes
    
    RT_DVD.GRAVAMENES:=RT_DVD.MONTO_PEDIDOS*(V_PCTGRAVAMEN/100);
    
    
    
    
    --DESCUENTOS CEPA???
    
    
    
    --COMISION
    
     BEGIN
    --Select para obtener el porcentaje de comision
    SELECT PCTCOMIS
    INTO V_PCTCOMIS
    FROM COMISION WHERE RT_DVD.MONTO_PEDIDOS BETWEEN MTO_INF_VENTA AND MTO_SUP_VENTA;
    --Excepcion para los montos que no entran en el rango
    EXCEPTION WHEN NO_DATA_FOUND THEN
    V_PCTCOMIS:=0;
    V_MEN:=SQLERRM;
    --Inserción del error en la tabla...
    INSERT INTO ERRORES_PROCESO_RECAUDACION(ERROR_ID, ORA_MSG, USR_MSG)
    VALUES (ERROR_PROCESO.NEXTVAL,V_MEN,'NO HAY DATOS COMISION' );
    END;
    
    --Calculo comision
    
    RT_DVD.MONTO_COMISIONES:=RT_DVD.MONTO_PEDIDOS*(V_PCTCOMIS/100);
    
    
    --Total descuentos
    RT_DVD.TOTAL_DESCUENTOS:=RT_DVD.MONTO_COMISIONES+RT_DVD.GRAVAMENES;
    
    
    --total recaudacion
    RT_DVD.TOTAL_RECAUDACION:=RT_DVD.MONTO_PEDIDOS-RT_DVD.TOTAL_DESCUENTOS;
    
    

    --RESUMEN
    FOR R_RES IN C_RES(RT_DVD.CEPA) LOOP
    RT_RS.CEPA:=R_RES.CEPA;
    RT_RS.NUM_PEDIDOS:=R_RES.NUM_PEDIDOS;
    RT_RS.MONTO_PEDIDOS:=R_RES.MONTO_PEDIDOS;
    END LOOP;
  



    
    
    
    
    
    
    
    END LOOP;
    CLOSE C_PED;
END;






















--EJERCICIO GUIA 232(PROBLEMA CON LAS FECHAS DE LA TABLA RESUMEN)








DECLARE
--Select para tabla DETALLE_PUNTOS_TARJETA_CATB
CURSOR C_DPTC IS
SELECT
CLI.NUMRUN NUMRUN, CLI.DVRUN DVRUN, TC.NRO_TARJETA NRO_TARJETA, TTC.NRO_TRANSACCION NRO_TRANSACCION
, TTC.FECHA_TRANSACCION FECHA_TRANSACCION,
TTC.MONTO_TRANSACCION MONTO_TRANSACCION,
TPC.NOMBRE_TIPO_CLIENTE TIPO_CLIENTE, TPTT.NOMBRE_TPTRAN_TARJETA AS TIPO_TRANSACCION
FROM CLIENTE CLI
JOIN TARJETA_CLIENTE TC ON CLI.NUMRUN=TC.NUMRUN
JOIN TRANSACCION_TARJETA_CLIENTE TTC ON TC.NRO_TARJETA=TTC.NRO_TARJETA
JOIN TIPO_CLIENTE TPC ON TPC.COD_TIPO_CLIENTE=CLI.COD_TIPO_CLIENTE
JOIN TIPO_TRANSACCION_TARJETA TPTT ON TPTT.COD_TPTRAN_TARJETA=TTC.COD_TPTRAN_TARJETA
WHERE EXTRACT(YEAR FROM TTC.FECHA_TRANSACCION)=EXTRACT(YEAR FROM SYSDATE)-1
ORDER BY 5,1,4;
--registro cursor principal
R_DPTC C_DPTC%ROWTYPE;

--cursor monto total anual
CURSOR C_MONTOANUAL(PNUMRUN NUMBER) IS
SELECT SUM(TTC.MONTO_TRANSACCION) AS MONTO_ANUAL, TPC.NOMBRE_TIPO_CLIENTE TIPO_CLIENTE
FROM CLIENTE CLI
JOIN TARJETA_CLIENTE TC ON CLI.NUMRUN=TC.NUMRUN
JOIN TRANSACCION_TARJETA_CLIENTE TTC ON TC.NRO_TARJETA=TTC.NRO_TARJETA
JOIN TIPO_CLIENTE TPC ON TPC.COD_TIPO_CLIENTE=CLI.COD_TIPO_CLIENTE
JOIN TIPO_TRANSACCION_TARJETA TPTT ON TPTT.COD_TPTRAN_TARJETA=TTC.COD_TPTRAN_TARJETA
WHERE EXTRACT(YEAR FROM TTC.FECHA_TRANSACCION)=EXTRACT(YEAR FROM SYSDATE)-1
AND CLI.NUMRUN=PNUMRUN
GROUP BY TPC.NOMBRE_TIPO_CLIENTE;






--Registro de la tabla detalle 
RT_DTLL DETALLE_PUNTOS_TARJETA_CATB%ROWTYPE;

--VARRAY con los valores de puntos
TYPE TIPO_VARRAY_PUNTOS IS VARRAY(4) OF NUMBER(3);
VARRAY_PUNTOS TIPO_VARRAY_PUNTOS:=TIPO_VARRAY_PUNTOS(250,300,550,700);
--Variables

V_CANT NUMBER(10);




--TABLA RESUMEN--------------------------------------------------------------------

--CURSOR PRINCIPAL
CURSOR C_TOTALRES IS
SELECT 
EXTRACT(MONTH FROM FECHA_TRANSACCION)||EXTRACT(YEAR FROM FECHA_TRANSACCION) AS MES_ANNO,
SUM(MONTO_TRANSACCION) MONTO_TOTAL_COMPRAS, SUM(PUNTOS_ALLTHEBEST) TOTAL_PUNTOS_COMPRAS
FROM DETALLE_PUNTOS_TARJETA_CATB
GROUP BY EXTRACT(MONTH FROM FECHA_TRANSACCION),EXTRACT(YEAR FROM FECHA_TRANSACCION)
ORDER BY EXTRACT(MONTH FROM FECHA_TRANSACCION);


--CURSOR POR TIPO DE MOVIMIENTO
/*SELECT * FROM DETALLE_PUNTOS_TARJETA_CATB*/
CURSOR C_TIPO IS
SELECT SUM(MONTO_TRANSACCION) TOTAL, TIPO_TRANSACCION, SUM(PUNTOS_ALLTHEBEST) TOTAL_PUNTOS,
EXTRACT(MONTH FROM FECHA_TRANSACCION)||EXTRACT(YEAR FROM FECHA_TRANSACCION) AS MES_ANNO
FROM DETALLE_PUNTOS_TARJETA_CATB
GROUP BY TIPO_TRANSACCION,
EXTRACT(MONTH FROM FECHA_TRANSACCION),EXTRACT(YEAR FROM FECHA_TRANSACCION);



--REGISTRO DE TABLA

RT_RES RESUMEN_PUNTOS_TARJETA_CATB%ROWTYPE;
BEGIN
EXECUTE IMMEDIATE 'TRUNCATE TABLE DETALLE_PUNTOS_TARJETA_CATB';
EXECUTE IMMEDIATE 'TRUNCATE TABLE RESUMEN_PUNTOS_TARJETA_CATB';



    OPEN C_DPTC;
    LOOP
    FETCH C_DPTC INTO R_DPTC;
    EXIT WHEN C_DPTC%NOTFOUND;
    RT_DTLL.NUMRUN:=R_DPTC.NUMRUN;
    RT_DTLL.DVRUN:=R_DPTC.DVRUN;
    RT_DTLL.NRO_TARJETA:=R_DPTC.NRO_TARJETA;
    RT_DTLL.NRO_TRANSACCION:=R_DPTC.NRO_TRANSACCION;
    RT_DTLL.FECHA_TRANSACCION:=R_DPTC.FECHA_TRANSACCION;
    RT_DTLL.TIPO_TRANSACCION:=R_DPTC.TIPO_TRANSACCION;
    RT_DTLL.MONTO_TRANSACCION:=R_DPTC.MONTO_TRANSACCION;
    
    
    --Calculo de puntos para todos segun monto
    IF RT_DTLL.MONTO_TRANSACCION>=100000 THEN
    V_CANT:=TRUNC(RT_DTLL.MONTO_TRANSACCION/100000);
    RT_DTLL.PUNTOS_ALLTHEBEST:=VARRAY_PUNTOS(1)*V_CANT;
    ELSE
    RT_DTLL.PUNTOS_ALLTHEBEST:=0;
    END IF;
    
    --Calculo de puntos segun beneficio especial
    --dueñas de casa y pensionados o de tercera edad
    FOR R_MONTANUAL IN C_MONTOANUAL(RT_DTLL.NUMRUN) LOOP
    IF TRIM(R_DPTC.TIPO_CLIENTE) IN ('Dueña(o) de Casa','Pensionados y Tercera Edad')  THEN
        IF R_MONTANUAL.MONTO_ANUAL BETWEEN 500000 AND 700000 THEN
            V_CANT:=TRUNC(RT_DTLL.MONTO_TRANSACCION/100000);
            RT_DTLL.PUNTOS_ALLTHEBEST:=RT_DTLL.PUNTOS_ALLTHEBEST+VARRAY_PUNTOS(2)*V_CANT;
        ELSIF R_MONTANUAL.MONTO_ANUAL BETWEEN 700001 AND 900000 THEN
            V_CANT:=TRUNC(RT_DTLL.MONTO_TRANSACCION/100000);
            RT_DTLL.PUNTOS_ALLTHEBEST:=RT_DTLL.PUNTOS_ALLTHEBEST+VARRAY_PUNTOS(3)*V_CANT;
        ELSIF R_MONTANUAL.MONTO_ANUAL>900000 THEN
            V_CANT:=TRUNC(RT_DTLL.MONTO_TRANSACCION/100000);
            RT_DTLL.PUNTOS_ALLTHEBEST:=RT_DTLL.PUNTOS_ALLTHEBEST+VARRAY_PUNTOS(4)*V_CANT;
        
        
        END IF;
    END IF;
    
    
    --INSERTAR LOS DATOS EN LA TABLA detalle
    INSERT INTO DETALLE_PUNTOS_TARJETA_CATB VALUES RT_DTLL;
    
   
    END LOOP;
    
    
    
    
    END LOOP;
    CLOSE C_DPTC;
    
    
    --TABLA RESUMEN---------------------------------------------------------
    
BEGIN
FOR R_TOTALRES IN C_TOTALRES LOOP
RT_RES.MES_ANNO:=R_TOTALRES.MES_ANNO;


END LOOP;

FOR R_TIPO IN C_TIPO LOOP
IF TRIM(R_TIPO.TIPO_TRANSACCION)='Compras Tiendas Retail o Asociadas' THEN
    RT_RES.MONTO_TOTAL_COMPRAS:=R_TIPO.TOTAL;
    RT_RES.TOTAL_PUNTOS_COMPRAS:=R_TIPO.TOTAL_PUNTOS;
ELSIF TRIM(R_TIPO.TIPO_TRANSACCION)='Avance en Efectivo' THEN
    RT_RES.MONTO_TOTAL_AVANCES:=R_TIPO.TOTAL;
    RT_RES.TOTAL_PUNTOS_AVANCES:=R_TIPO.TOTAL_PUNTOS;
ELSIF TRIM(R_TIPO.TIPO_TRANSACCION)='Súper Avance en Efectivo' THEN
    RT_RES.MONTO_TOTAL_SAVANCES:=R_TIPO.TOTAL;
    RT_RES.TOTAL_PUNTOS_SAVANCES:=R_TIPO.TOTAL_PUNTOS;
END IF;
END LOOP;







    INSERT INTO RESUMEN_PUNTOS_TARJETA_CATB VALUES RT_RES;
    END;
END;

/*SELECT * FROM RESUMEN_PUNTOS_TARJETA_CATB*/



